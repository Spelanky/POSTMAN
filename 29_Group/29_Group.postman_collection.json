{
	"info": {
		"_postman_id": "b5fb0357-a207-4e25-ac6e-d54b07f78a69",
		"name": "29_Group",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17406426"
	},
	"item": [
		{
			"name": "EquivalenceClassAndBoundaryValue",
			"item": [
				{
					"name": "age_europe_0-17 (underage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка класса эквивалентности 0-17\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// Вводим значение из класса, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах.\r",
									"\r",
									"let arr = [10, '0', 17];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_europe',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        //console.log(res);\r",
									"        //console.log(Object.values(res));\r",
									"        let statusCode = Object.values(res)[3];\r",
									"            \r",
									"            if (statusCode === 200) {\r",
									"                let resType = res.json();\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(resType.age_type).to.include('underage');\r",
									"                });\r",
									"            } else {\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(res).to.have.property('code', 200);   \r",
									"                });\r",
									"            };  \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/age_europe",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"age_europe"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_europe_18-50 (adult)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка класса эквивалентности 18-50\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).\r",
									"\r",
									"let arr = [25, 18, 50, 49];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_europe',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        let statusCode = Object.values(res)[3];\r",
									"            \r",
									"            if (statusCode === 200) {\r",
									"                let resType = res.json();\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(resType.age_type).to.include('adult');\r",
									"                });\r",
									"            } else {\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(res).to.have.property('code', 200);   \r",
									"                });\r",
									"            };  \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_europe",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_europe"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_europe_51-100 (antiquity)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка класса эквивалентности 51-100\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).\r",
									"\r",
									"let arr = [70, 51, 99, 100];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_europe',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        let statusCode = Object.values(res)[3];\r",
									"            \r",
									"            if (statusCode === 200) {\r",
									"                let resType = res.json();\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(resType.age_type).to.include('antiquity');\r",
									"                });\r",
									"            } else {\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(res).to.have.property('code', 200);   \r",
									"                });\r",
									"            };  \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "75",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_europe",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_europe"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_europe_Negative (Status 500)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка на Status 500\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим все, что должно вызвать Status 500)\r",
									"\r",
									"let arr = ['', ' ', -1, 101, 1000, -1000, 0.5, '0,5', 'abc', '.', '/', '?', ':', '-', '+', '=', '#', '$', '%', '&', ',', '?', '@', '\"', ';', '*'];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_europe',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        pm.test('Age value: ' + testData, function () {\r",
									"            pm.expect(res).to.have.property('code', 500);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_europe",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_europe"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_usa_0-20 (underage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка класса эквивалентности 0-20\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).\r",
									"\r",
									"let arr = [10, '0', 20];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_usa',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        //console.log(res);\r",
									"        //console.log(Object.values(res));\r",
									"        let statusCode = Object.values(res)[3];\r",
									"            \r",
									"            if (statusCode === 200) {\r",
									"                let resType = res.json();\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(resType.age_type).to.include('underage');\r",
									"                });\r",
									"            } else {\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(res).to.have.property('code', 200);   \r",
									"                });\r",
									"            };  \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "19",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_usa",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_usa"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_usa_21-50 (adult)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка класса эквивалентности 21-50\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).\r",
									"\r",
									"let arr = [25, 21, 50, 22, 49];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_usa',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        let statusCode = Object.values(res)[3];\r",
									"            \r",
									"            if (statusCode === 200) {\r",
									"                let resType = res.json();\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(resType.age_type).to.include('adult');\r",
									"                });\r",
									"            } else {\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(res).to.have.property('code', 200);   \r",
									"                });\r",
									"            };  \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_usa",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_usa"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_usa_51-100 (antiquity)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка класса эквивалентности 51-100\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).\r",
									"\r",
									"let arr = [70, 51, 100];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_usa',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        let statusCode = Object.values(res)[3];\r",
									"            \r",
									"            if (statusCode === 200) {\r",
									"                let resType = res.json();\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(resType.age_type).to.include('antiquity');\r",
									"                });\r",
									"            } else {\r",
									"                pm.test('Age value: ' + testData, function () {\r",
									"                pm.expect(res).to.have.property('code', 200);   \r",
									"                });\r",
									"            };  \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "75",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_usa",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_usa"
							]
						}
					},
					"response": []
				},
				{
					"name": "age_usa_Negative (Status 500)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка на Status 500\r",
									"// Введите в массив через запятую тестовые данные\r",
									"// (Вводим все, что должно вызвать Status 500)\r",
									"\r",
									"let arr = ['', ' ', -1, 101, 1000, -1000, 0.5, '0,5', 'abc', '.', '/', '?', ':', '-', '+', '=', '#', '$', '%', '&', ',', '?', '@', '\"', ';', '*'];\r",
									"\r",
									"let index;\r",
									"for (index = 0; index < arr.length; ++index) {\r",
									"    let testData = arr[index];\r",
									"    pm.sendRequest({\r",
									"        url: 'http://116.203.27.46:5002/age_usa',\r",
									"        method: 'POST',\r",
									"        headers: {},\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'age', value: arr[index]}\r",
									"            ] \r",
									"        }   \r",
									"    }, function(err, res) {\r",
									"        console.log('Age value: ' + testData);\r",
									"        pm.test('Age value: ' + testData, function () {\r",
									"            pm.expect(res).to.have.property('code', 500);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/age_usa",
							"host": [
								"{{url}}"
							],
							"path": [
								"age_usa"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_Anatoliy",
			"item": [
				{
					"name": "HW_MAIN",
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "http://162.55.220.72:5005/user_info_2\n1. Вставить параметр salary из окружения в request\n2. Вставить параметр age из окружения в age\n3. Вставить параметр name из окружения в name\n4. Отправить запрос.\n5. Статус код 200\n6. Спарсить response body в json.\n7. Спарсить request.\n8. Проверить, что json response имеет параметр start_qa_salary\n9. Проверить, что json response имеет параметр qa_salary_after_6_months\n10. Проверить, что json response имеет параметр qa_salary_after_12_months\n11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\n12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\n13. Проверить, что json response имеет параметр person\n14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\n15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\n16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\n17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\n18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\n19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\n20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\n21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\n22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						}
					},
					"response": []
				},
				{
					"name": "HW_Anatoliy",
					"request": {
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "Ну и небольшая домашка от меня:) ❤️\n\n1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2\nНеобходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). \nP.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!\n--Требования:--\n1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\n2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\n3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\n\n===========================================================================\n\n1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.\n\n2. http://162.55.220.72:5007/object_info_4\n* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\n\n3. http://162.55.220.72:5005/object_info_3\n Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\n\n4. http://162.55.220.72:5005/user_info_2\n1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\n2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\n3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\n\nПо этой домашке также проведем разбор ориентировочно в ПЯТНИЦУ. как и по JS",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						}
					},
					"response": []
				},
				{
					"name": "req==resp. No FOR 3*",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let req_sal = +pm.request.url.query.get('salary')",
									"let req_age = +pm.request.url.query.get('age')",
									"let req_name = pm.request.url.query.get('name')",
									"",
									"const req_obj = {",
									"    salary: req_sal,",
									"    age: req_age,",
									"    name: req_name",
									"}",
									"",
									"let resp_sal = +pm.response.json().salary",
									"let resp_age = +pm.response.json().age",
									"let resp_name = pm.response.json().name",
									"",
									"const resp_obj = {",
									"    salary: resp_sal,",
									"    age: resp_age,",
									"    name: resp_name",
									"}",
									"",
									"console.log(resp_obj)",
									"",
									"pm.test(`req_obj == Resp_obj`, function(){",
									"    pm.expect(req_obj).to.deep.eql(resp_obj)",
									"})",
									"",
									"// // =================================",
									"// //  Вариант 2. Если много всего",
									"",
									"// let req_sal = +pm.request.url.query.get('salary')",
									"// let req_age = +pm.request.url.query.get('age')",
									"// let req_name = pm.request.url.query.get('name')",
									"",
									"// const req_obj = {",
									"//     salary: req_sal,",
									"//     age: req_age,",
									"//     name: req_name",
									"// }",
									"",
									"// // Бежим циклом по объекту и пушим в resp_obj ключи",
									"// const resp_obj = {}",
									"// for(key in req_obj){",
									"//     if(!isNaN(pm.response.json()[key])){ ",
									"//     resp_obj[key] = +pm.response.json()[key]",
									"//     } else resp_obj[key] = pm.response.json()[key]",
									"// }",
									"",
									"// pm.test(`req_obj == resp_obj`, function(){",
									"//     pm.expect(req_obj).to.deep.eql(resp_obj)",
									"// })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Mitka&age=37&salary=700",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Mitka"
								},
								{
									"key": "age",
									"value": "37"
								},
								{
									"key": "salary",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(object_info_4) 2* forEach compare",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let req_sal = pm.request.url.query.get('salary')",
									"",
									"// Т.к. у нас приходит в Response 3 значения salary. Нужно обратится к переменной resp_sal ",
									"// и пробежаться по ней циклом. Лучший цикл в данном случае - это ForEach (он запускается как метод какого-то массива)",
									"// for запускается вне зависимости от какой-либо переменной",
									"",
									"let resp_sal = pm.response.json().salary",
									"for(let i = 0; i <= resp_sal.length-1; i++){",
									"    pm.test(`req_sal*${i+1} ${req_sal} == resp_sal ${resp_sal[i]}`, function(){",
									"        pm.expect(+req_sal*(i+1)).to.eql(+resp_sal[i])",
									"        console.log(req_sal*(i+1))",
									"    })",
									"}",
									"        // 1.(req_sal*(0+1)) 2.(req_sal*(1+1)) 3.(req_sal*(2+1))",
									"        // +req_sal - унарный оператоа, чтобы значение сразу приводилось к числу",
									"",
									"// То же самое, но с FOREACH. Передаем callback ф-ю. Он создает переменную el, которой кадлый раз присваивает новый элемент массива, который прогоняется",
									"resp_sal.forEach((el, i) => {",
									"    pm.test(`req_sal*${i+1} ${req_sal} == resp_sal ${el}`, function(){",
									"        pm.expect(+req_sal*(i+1)).to.eql(+el)",
									"        // i++",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "str",
									"type": "text"
								},
								{
									"key": "age",
									"value": "int",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "int",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Mitka&age=37&salary=700",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Mitka"
								},
								{
									"key": "age",
									"value": "37"
								},
								{
									"key": "salary",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(object_info_3) 3* FOR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let req_sal = +pm.request.url.query.get('salary')",
									"let req_age = +pm.request.url.query.get('age')",
									"let req_name = pm.request.url.query.get('name')",
									"",
									"const req_obj = {",
									"    salary: req_sal,",
									"    age: req_age,",
									"    name: req_name",
									"}",
									"// Бежим циклом по объекту и пушим в resp_obj ключи и сравниваем req==resp",
									"const resp_obj = {}",
									"for(key in req_obj){",
									"    if(!isNaN(pm.response.json()[key])){ ",
									"    resp_obj[key] = +pm.response.json()[key]",
									"    } else resp_obj[key] = pm.response.json()[key]",
									"}",
									"",
									"pm.test(`req_obj == resp_obj`, function(){",
									"    pm.expect(req_obj).to.deep.eql(resp_obj)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Mitka&age=37&salary=700",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Mitka"
								},
								{
									"key": "age",
									"value": "37"
								},
								{
									"key": "salary",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(object_info_2) 4*",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/",
									"",
									"// Пробегаем циклом по ключам JSON в Response. Только первые ключи, без вложенности и пушим названия ключей (добавляем каждый следующий элемент) в массив arr.",
									"// ",
									"let arr = []",
									"const jsonData = pm.response.json()",
									"for(const key in jsonData){",
									"    arr.push(key)",
									"}",
									"console.log(arr)",
									" ",
									"// Проверяем наличие ключей в JSON Response. Перебераем массив на предмет наличия каждого ключа из массива в Response.",
									"arr.forEach((el) => {",
									"    pm.test(`Response has ${el}`, function(){",
									"        pm.expect(jsonData).to.have.property(el)",
									"    })",
									"})",
									"/*2)** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)*/",
									"// Создаем массив с данными для перемножения",
									"const count = [\" \", 3.3, 2.7, 3.8, 2, 1]",
									"arr.forEach((el, i) => {",
									"    if(el != 'person')",
									"    pm.test(`Response has1 ${el}`, function(){",
									"        pm.expect(+jsonData[el]).to.eql(700*count[i])",
									"    })",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Mitka",
									"type": "text"
								},
								{
									"key": "age",
									"value": "37",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "700",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "(object_info_2) 4* Last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Создаем объект, в котором будет лкжать отдновременно и ключи и counter",
									"",
									"const jsonData = pm.response.json()",
									"let arr = []",
									"",
									"const counters = {",
									"    'person': '',",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Mitka",
									"type": "text"
								},
								{
									"key": "age",
									"value": "37",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "700",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Types variable compare",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let req_sal = +pm.request.url.query.get('salary')",
									"",
									"let resp_sal = pm.response.json().salary",
									"",
									"pm.test(`req_sal == resp_sal`, function(){",
									"    pm.expect(req_sal).to.eql(resp_sal)",
									"})",
									"",
									"// При сравнении 2-х типов string vs number Тест будет FAIL",
									"// req_sal == resp_sal | AssertionError: expected '700' to deeply equal 700",
									"// +pm.request.url.query.get('salary') - + приведет значение переменной к типу number и Тест пройдет PASS"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Mitka&age=37&salary=700",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Mitka"
								},
								{
									"key": "age",
									"value": "37"
								},
								{
									"key": "salary",
									"value": "700"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CSV_Validation_user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
									"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
									"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
									"\r",
									"function nameValidation(value) {\r",
									"    if(value && value.length > 2 && value.length < 41 && value.trim() == value) {\r",
									"        return true\r",
									"    } else return false\r",
									"} \r",
									"function ageValidation(value) {\r",
									"  if(value && !isNaN(value) && value > 17 && value < 121 && Number.isInteger(+value)) {\r",
									"      return true\r",
									"  } else return false\r",
									"}\r",
									"\r",
									" function salaryValidation(value) {\r",
									"     if(value && !isNaN(value) && value > 0 && value < 11000001 && Number.isInteger(+value)) {\r",
									"         return true\r",
									"     } else return false\r",
									" }\r",
									"\r",
									"function validator() {\r",
									"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary) ? true : false\r",
									"}\r",
									"let name = pm.iterationData.get('name')\r",
									"let age = pm.iterationData.get('age')\r",
									"let salary = pm.iterationData.get('salary')\r",
									"\r",
									"\r",
									"if(validator()) {\r",
									"    pm.test(`Expect status 200 with name = \"${name}\", age = \"${age}\" and salary = \"${salary}\"`, () => {\r",
									"         pm.response.to.have.status(200);\r",
									"    }) \r",
									"} else {\r",
									"     pm.test(`Expect NOT to have status 200 with name = \"${name}\", age = \"${age}\" and salary = \"${salary}\"`, () => {\r",
									"         pm.response.to.not.have.status(200);\r",
									"    })  \r",
									"}\r",
									"console.log(validator())\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EP2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mitka",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "str",
							"type": "text"
						},
						{
							"key": "age",
							"value": "int",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "int",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Mitka&age=37&weight=85",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Mitka"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "weight",
							"value": "85"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "str",
							"type": "text"
						},
						{
							"key": "age",
							"value": "int",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "int",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Mitka&age=37&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Mitka"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let arr = []",
							"for (const k in pm.response.json()){",
							"    arr.push(k)",
							"}",
							"console.log(arr)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mitka",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Mitka",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "700",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}