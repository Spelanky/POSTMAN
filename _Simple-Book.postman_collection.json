{
	"info": {
		"_postman_id": "bb87fcaa-d2d0-4d47-b09a-9d78fb65b189",
		"name": "_Simple-Book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"//console.log(response.status);\r",
							"// Альтернативный способ записи\r",
							"//Парсим в консоль json ответ в виде JS объекта\r",
							"console.log(response['status']);\r",
							"\r",
							"pm.test(\"Status should be OK\", () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"// Назначаем следующий запрос, тем самым минуем запрос \"Register API Client\" и продолжаем по списку вниз\r",
							"// Можно перетащить запрос \"Register API Client\" в самый низ, а в \"Delete an order\" прописать\r",
							"// postman.setNextRequest(null);\r",
							"postman.setNextRequest(\"List of books\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/status",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Альтернативный способ записи через expect\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Mitka\",\r\n   \"clientEmail\": \"mitka@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/api-clients",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"const nonFictionBooks = response.filter((book) => book.available === true);\r",
							"const book = nonFictionBooks[0];\r",
							"\r",
							"//Заносим в переменную окружения только свойство объекта (id)\r",
							"if (book) {\r",
							"//    pm.globals.set(\"bookId\", nonFictionBooks[0].id);\r",
							"    pm.environment.set(\"bookId\", nonFictionBooks[0].id);\r",
							"}\r",
							"\r",
							"pm.test(\"Book found\", () => {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"    pm.expect(book.available).to.be.true;\r",
							"    pm.expect(book.available).to.eql(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/books?type=non-fiction",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"        // Тесты на проверку JSON значения в ответе.\r",
							"//Создаем переменную response за пределами {} для использования во всех тестах ниже\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Проверка на наличие на складе. Значение \"сurrent-stock\" больше 0. 'JSON value check'\r",
							"pm.test(\"Is in stock\", () => {\r",
							"    pm.expect(response['current-stock']).to.be.above(0); \r",
							"});\r",
							"\r",
							"// Значение \"available\" в ответе === true. 'JSON value check'\r",
							"pm.test(\"Book is available\", function () {\r",
							"    pm.expect(response['available']).to.eql(true);\r",
							"});\r",
							"\r",
							"// Альтернативная запись теста на проверку типа данных значения (key:value) в ответе. Значение ID является типом number. 'JSON value check'\r",
							"pm.test(\"ID is a number\", function () {\r",
							"    var jsonData = pm.response.json(); //Плодим еще одну переменную jsonData внутри запроса, хотя можно использовать и константу 'response'\r",
							"    pm.expect(jsonData.id).to.be.an('number');\r",
							"});\r",
							"\r",
							"// В теле JSON ответа (key или value) содержится \"price\". 'Response body contains string'\r",
							"// include используется для проверки наличия ключа/значения в массиве/ответе, независимо от количества этих значений.\r",
							"pm.test(\"Body matches string 'price' & no badvalue\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"price\");\r",
							"    pm.expect(pm.response.text()).to.not.include(\"badvalue\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/books/:id",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Тест на проверку типа данных значения (key:value) ответа. Created: boolean (true|false). 'JSON value check'\r",
							"pm.test(\"Order Created: true\", function () {\r",
							"    var jsonData = pm.response.json(); //Плодим еще одну переменную  jsonData, хотя можно использовать и 'const response'\r",
							"    pm.expect(jsonData.created).to.be.an('boolean');\r",
							"});\r",
							"\r",
							"// Созданный сервером orderId токен записываем в переменную \"orderId\"\r",
							"const response = pm.response.json();\r",
							"//pm.globals.set(\"orderId\", response.orderId);\r",
							"pm.environment.set(\"orderId\", response.orderId);\r",
							"pm.test('ID copied to environment variable \"orderId\"');\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/orders",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all book orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"Конвертер для перевода JSON ответа в схему для проверки\r",
							"https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"*/\r",
							"\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"bookId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"customerName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"createdBy\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"quantity\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"bookId\",\r",
							"        \"customerName\",\r",
							"        \"createdBy\",\r",
							"        \"quantity\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/orders",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/orders/:orderid",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"// Не продолжаеть прогон коллекции после этого запроса\r",
							"//postman.setNextRequest(null);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Mitka {{$randomLastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/orders/:orderid",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_URL}}/orders/:orderid",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_URL",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "-----"
		}
	]
}